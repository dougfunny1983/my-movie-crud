{"ast":null,"code":"var _jsxFileName = \"/home/doug/projetos-trybe/my-movie-crud/src/pages/EditMovie.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Loading from '../components/Loading';\nimport { MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    movieAPI.getMovie(this.props.match.params.id).then(data => this.setState({\n      status: '',\n      movie: data\n    }));\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie).then(data => this.setState({\n      shouldRedirect: true,\n      movie: data\n    }));\n  }\n\n  render() {\n    const {\n      status,\n      shouldRedirect,\n      movie\n    } = this.state;\n    if (shouldRedirect) return React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n    if (status === 'loading') return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    });\n    return React.createElement(MovieForm, {\n      movie: movie,\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default EditMovie;\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: {\n      id: PropTypes.number\n    }\n  }).isRequired\n};","map":{"version":3,"sources":["/home/doug/projetos-trybe/my-movie-crud/src/pages/EditMovie.js"],"names":["React","Component","Redirect","PropTypes","Loading","MovieForm","movieAPI","EditMovie","constructor","props","state","status","shouldRedirect","movie","handleSubmit","bind","componentDidMount","getMovie","match","params","id","then","data","setState","updatedMovie","updateMovie","render","propTypes","shape","number","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAO,KAAKC,QAAZ,MAA0B,sBAA1B;;AAEA,MAAMC,SAAN,SAAwBN,SAAxB,CAAkC;AAChCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,SADG;AAEXC,MAAAA,cAAc,EAAE,KAFL;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBV,IAAAA,QAAQ,CAACW,QAAT,CAAkB,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,MAAjB,CAAwBC,EAA1C,EAA8CC,IAA9C,CAAoDC,IAAD,IACjD,KAAKC,QAAL,CAAc;AACZZ,MAAAA,MAAM,EAAE,EADI;AAEZE,MAAAA,KAAK,EAAES;AAFK,KAAd,CADF;AAMD;;AAEDR,EAAAA,YAAY,CAACU,YAAD,EAAe;AACzBlB,IAAAA,QAAQ,CAACmB,WAAT,CAAqBD,YAArB,EAAmCH,IAAnC,CAAyCC,IAAD,IACtC,KAAKC,QAAL,CAAc;AACZX,MAAAA,cAAc,EAAE,IADJ;AAEZC,MAAAA,KAAK,EAAES;AAFK,KAAd,CADF;AAMD;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEf,MAAAA,MAAF;AAAUC,MAAAA,cAAV;AAA0BC,MAAAA;AAA1B,QAAoC,KAAKH,KAA/C;AACA,QAAIE,cAAJ,EAAoB,OAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEpB,QAAID,MAAM,KAAK,SAAf,EAA0B,OAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAE1B,WAAO,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAEE,KAAlB;AAAyB,MAAA,QAAQ,EAAE,KAAKC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AApC+B;;AAuClC,eAAeP,SAAf;AAEAA,SAAS,CAACoB,SAAV,GAAsB;AACpBT,EAAAA,KAAK,EAAEf,SAAS,CAACyB,KAAV,CAAgB;AACrBT,IAAAA,MAAM,EAAE;AACNC,MAAAA,EAAE,EAAEjB,SAAS,CAAC0B;AADR;AADa,GAAhB,EAIJC;AALiB,CAAtB","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Loading from '../components/Loading';\nimport { MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: [],\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    movieAPI.getMovie(this.props.match.params.id).then((data) =>\n      this.setState({\n        status: '',\n        movie: data,\n      }),\n    );\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie).then((data) =>\n      this.setState({\n        shouldRedirect: true,\n        movie: data,\n      }),\n    );\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    if (status === 'loading') return <Loading />;\n\n    return <MovieForm movie={movie} onSubmit={this.handleSubmit} />;\n  }\n}\n\nexport default EditMovie;\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: {\n      id: PropTypes.number,\n    },\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}