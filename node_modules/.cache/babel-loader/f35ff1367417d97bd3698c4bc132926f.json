{"ast":null,"code":"var _jsxFileName = \"/home/doug/projetos-trybe/my-movie-crud/src/pages/MovieDetails.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    movieAPI.getMovie(this.props.match.params.id).then(data => this.setState({\n      movie: data,\n      loading: false\n    }));\n  }\n\n  render() {\n    // Change the condition to check the state\n    if (this.state.loading) return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    });\n    const {\n      title,\n      storyline,\n      imagePath,\n      genre,\n      rating,\n      subtitle\n    } = this.state.movie;\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col s12 m7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"Movie Cover\",\n      src: `../${imagePath}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, title)), React.createElement(\"div\", {\n      className: \"card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, `Subtitle: ${subtitle}`), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, `Storyline: ${storyline}`), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, `Genre: ${genre}`), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, `Rating: ${rating}`)), React.createElement(\"div\", {\n      className: \"card-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: `/movies/${this.props.match.params.id}/edit`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \" EDITAR \"), React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \" VOLTAR \"), React.createElement(Link, {\n      to: \"/\",\n      onClick: () => movieAPI.deleteMovie(this.props.match.params.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"DELETAR\")))));\n  }\n\n}\n\nexport default MovieDetails;\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: {\n      id: PropTypes.number\n    }\n  }).isRequired\n};","map":{"version":3,"sources":["/home/doug/projetos-trybe/my-movie-crud/src/pages/MovieDetails.js"],"names":["React","Component","PropTypes","Link","movieAPI","Loading","MovieDetails","constructor","props","state","movie","loading","componentDidMount","getMovie","match","params","id","then","data","setState","render","title","storyline","imagePath","genre","rating","subtitle","deleteMovie","propTypes","shape","number","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    movieAPI.getMovie(this.props.match.params.id).then((data) =>\n      this.setState({\n        movie: data,\n        loading: false,\n      }),\n    );\n  }\n\n  render() {\n    // Change the condition to check the state\n    if (this.state.loading) return <Loading />;\n\n    const { title, storyline, imagePath, genre, rating, subtitle } = this.state.movie;\n\n    return (\n      <div className=\"row\">\n        <div className=\"col s12 m7\">\n          <div className=\"card\">\n            <div className=\"card-image\">\n              <img alt=\"Movie Cover\" src={`../${imagePath}`} />\n              <span className=\"card-title\">{title}</span>\n            </div>\n            <div className=\"card-content\">\n              <p>{`Subtitle: ${subtitle}`}</p>\n              <p>{`Storyline: ${storyline}`}</p>\n              <p>{`Genre: ${genre}`}</p>\n              <p>{`Rating: ${rating}`}</p>\n            </div>\n            <div className=\"card-action\">\n              <Link to={`/movies/${this.props.match.params.id}/edit`}> EDITAR </Link>\n              <Link to=\"/\"> VOLTAR </Link>\n              <Link to=\"/\" onClick={() => movieAPI.deleteMovie(this.props.match.params.id)}>\n                DELETAR\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: {\n      id: PropTypes.number,\n    },\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}