{"version":3,"sources":["components/MovieCard.js","components/Loading.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","services/movieData.js","index.js"],"names":["MovieCard","movie","this","props","title","storyline","imagePath","id","className","alt","src","to","React","Component","Loading","readMovies","JSON","parse","localStorage","getItem","saveMovies","movies","setItem","stringify","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","MovieList","state","loading","then","data","setState","map","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","placeholder","type","value","onChange","event","updateMovie","target","htmlFor","subtitle","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","MovieDetails","movieAPI","match","params","filter","status","NewMovie","shouldRedirect","newMovie","movieData","nextId","length","teste","EditMovie","updatedMovie","NotFound","App","exact","path","component","Boolean","window","location","hostname","bookmarked","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c8861f1.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, storyline, imagePath, id } = movie;\n    return (\n      <div className=\"row\">\n        <div className=\"col s12 m7\">\n          <div className=\"card movie-card\">\n            <div className=\"card-image\">\n              <img\n                alt=\"Movie Cover\"\n                className=\"movie-card-image\"\n                src={imagePath}\n              />\n              <span className=\"card-title\">{title}</span>\n            </div>\n            <div className=\"card-content\">\n              <p>{storyline}</p>\n            </div>\n            <div className=\"card-action\">\n              <Link to={`movies/${id}`}> VER DETALHES </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieCard;\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    rating: PropTypes.number,\n    subtitle: PropTypes.string,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","const readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  });\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    movieAPI.getMovies().then((data) =>\n      this.setState({\n        movies: data,\n        loading: false,\n      }),\n    );\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n    if (loading) return <Loading />;\n\n    return (\n      <div>\n        <header>\n          <h1 className=\"header\">Rotten Tomatoes</h1>\n        </header>\n        <div className=\"movie-list\">\n          {movies.map((movie) => (\n            <MovieCard key={movie.title} movie={movie} />\n          ))}\n        </div>\n        <footer>\n          <Link to=\"/movies/new\" className=\"btn\">\n            ADICIONAR CARTÃO\n          </Link>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={title}\n            onChange={(event) => this.updateMovie('title', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_title\">Título</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            className=\"validate\"\n            value={subtitle}\n            onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_subtitle\">Subtítulo</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            className=\"validate\"\n            value={imagePath}\n            onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_image\">Imagem</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <textarea\n            id=\"movie_storyline\"\n            className=\"materialize-textarea\"\n            value={storyline}\n            onChange={(event) => this.updateMovie('storyline', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_storyline\">Sinopse</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div className=\"row col\">\n        <label htmlFor=\"movie_genre\">Genre Select</label>\n        <select\n          className=\"browser-default\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            className=\"form-control\"\n            step={0.1}\n            min={0}\n            max={5}\n            value={rating}\n            onChange={(event) => this.updateMovie('rating', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_rating\">Avaliação</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div className=\"row\">\n        <button\n          className=\"btn waves-effect waves-light\"\n          type=\"button\"\n          onClick={this.handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"movie-form\">\n        <div className=\"row\">\n          <form className=\"col s12\">\n            {this.renderTitleInput()}\n            {this.renderSubtitleInput()}\n            {this.renderImagePathInput()}\n            {this.renderStorylineInput()}\n            {this.renderGenreSelection()}\n            {this.renderRatingInput()}\n            {this.renderSubmitButton()}\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    movieAPI.getMovie(this.props.match.params.id).then((data) =>\n      this.setState({\n        movie: data,\n        loading: false,\n      }),\n    );\n  }\n\n  render() {\n    // Change the condition to check the state\n    if (this.state.loading) return <Loading />;\n\n    const { title, storyline, imagePath, genre, rating, subtitle } = this.state.movie;\n\n    return (\n      <div className=\"row\">\n        <div className=\"col s12 m7\">\n          <div className=\"card\">\n            <div className=\"card-image\">\n              <img alt=\"Movie Cover\" src={`../${imagePath}`} />\n              <span className=\"card-title\">{title}</span>\n            </div>\n            <div className=\"card-content\">\n              <p>{`Subtitle: ${subtitle}`}</p>\n              <p>{`Storyline: ${storyline}`}</p>\n              <p>{`Genre: ${genre}`}</p>\n              <p>{`Rating: ${rating}`}</p>\n            </div>\n            <div className=\"card-action\">\n              <Link to={`/movies/${this.props.match.params.id}/edit`}> EDITAR </Link>\n              <Link to=\"/\"> VOLTAR </Link>\n              <Link to=\"/\" onClick={() => movieAPI.deleteMovie(this.props.match.params.id)}>\n                DELETAR\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: {\n      id: PropTypes.number,\n    },\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = { shouldRedirect: false };\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie).then(\n      this.setState({\n        shouldRedirect: true,\n      }),\n    );\n  }\n\n  render() {\n    const { teste } = this.state.shouldRedirect;\n    if (teste) return <Redirect to=\"/\" />;\n    return <MovieForm onSubmit={this.handleSubmit} />;\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Loading from '../components/Loading';\nimport { MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: [],\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    movieAPI.getMovie(this.props.match.params.id).then((data) =>\n      this.setState({\n        status: '',\n        movie: data,\n      }),\n    );\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie).then((data) =>\n      this.setState({\n        shouldRedirect: true,\n        movie: data,\n      }),\n    );\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    if (status === 'loading') return <Loading />;\n\n    return <MovieForm movie={movie} onSubmit={this.handleSubmit} />;\n  }\n}\n\nexport default EditMovie;\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: {\n      id: PropTypes.number,\n    },\n  }).isRequired,\n};\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div className=\"not-found header\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/my-movie-crud/\" component={MovieList} />\n        <Route exact path=\"/my-movie-crud/movies/new\" component={NewMovie} />\n        <Route exact path=\"/my-movie-crud/movies/:id\" component={MovieDetails} />\n        <Route exact path=\"/my-movie-crud/movies/:id/edit\" component={EditMovie} />\n        <Route exact component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport data from './services/movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}